'use strict'

const {
  GraphQLInputObjectType,
  GraphQLList,
  GraphQLNonNull,
  GraphQLString
} = require('graphql')
const eos_types = require('../eosio_types')

/**
 * Generate GraphQL mutation fields (input object types) for a given ABI.
 * Function uses the AST generated by abi_ast.
 * @name ast_to_input_types
 * @kind function
 * @param {object} ABI_AST Abstract syntax tree for generating GraphQL input object types.
 * @returns {object} GraphQL input types.
 * @ignore
 */
function ast_to_input_types(ABI_AST) {
  const abi_ast = ABI_AST.structs.reduce(
    (
      acc,
      { name: struct_name, fields: struct_fields, base },
      index,
      structs_array
    ) => {
      const handle_base_fields = (baseValue, fields = []) => {
        const field = ABI_AST.structs.find(({ name }) => baseValue == name)
        if (field.base == '') return [...field.fields, ...fields]
        return handle_base_fields(field.base, fields)
      }

      if (base !== '') struct_fields = handle_base_fields(base, struct_fields)

      const handle_input_GraphQLObjectType = objectType => {
        return new GraphQLInputObjectType(objectType)
      }

      return {
        ...acc,
        [struct_name]: handle_input_GraphQLObjectType({
          name: ABI_AST.gql_contract + '_input_' + struct_name,
          fields: () => {
            const graphql_type_fields = struct_fields.reduce(
              (acc, { name: struct_field_name, type: struct_field_type }) => {
                let isListType, optionType, handle_type
                /**
                 * abi field list (array) item.
                 */
                if (struct_field_type.endsWith('[]')) {
                  isListType = true
                  struct_field_type = struct_field_type.slice(0, -2)
                }

                /**
                 * Optional abi fields type
                 */
                if (struct_field_type.endsWith('?')) {
                  optionType = true
                  struct_field_type = struct_field_type.slice(0, -1)
                }

                /**
                 * variant type
                 */
                if (struct_field_type.endsWith('$')) {
                  optionType = true
                  struct_field_type = struct_field_type.slice(0, -1)
                }

                /**
                 * Check if a struct_field_type is a struct.
                 */
                const field_struct = structs_array.find(
                  ({ name }) => name == struct_field_type
                )

                // const variant_type = !!(
                //   field_struct && field_struct.name.startsWith('variant')
                // )

                if (field_struct) handle_type = abi_ast[field_struct.name]
                else if (eos_types[struct_field_type])
                  handle_type = eos_types[struct_field_type]
                else handle_type = GraphQLString

                let type

                if (optionType)
                  type = isListType ? new GraphQLList(handle_type) : handle_type
                else
                  type = isListType
                    ? new GraphQLList(new GraphQLNonNull(handle_type))
                    : new GraphQLNonNull(handle_type)

                return {
                  ...acc,
                  [struct_field_name]: {
                    type,
                    description: ''
                  }
                }
              },
              {}
            )

            return graphql_type_fields
          }
        })
      }
    },
    {}
  )

  return abi_ast
}

module.exports = ast_to_input_types
